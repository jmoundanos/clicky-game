{"version":3,"sources":["components/Cards/Cards.js","components/Wrapper/Wrapper.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Cards","props","className","height","width","alt","name","src","image","id","onClick","clickedCard","Wrapper","children","Header","score","topScore","shuffle","array","i","length","j","Math","floor","random","App","state","data","showAlert","showSuccess","clickedImages","setState","indexOf","push","handleIncrement","makeShuffle","style","opacity","this","message","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"gyCAWeA,G,MAPD,SAAAC,GAAK,OACjB,yBAAKC,UAAU,sBACV,yBAAKC,OAAO,MAAMC,MAAM,MAAMC,IAAKJ,EAAMK,KAAMC,IAAKN,EAAMO,MAAOC,GAAIR,EAAMQ,GACzEC,QAAS,kBAAMT,EAAMU,YAAYV,EAAMQ,UCFjCG,G,MAFC,SAAAX,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAMY,YCU1CC,G,MATA,SAAAb,GAAK,OAChB,yBAAKC,UAAU,aACX,yBAAKA,UAAU,SAAQ,yBAAKG,IAAI,uBAAuBE,IAAK,6BAC5D,yBAAKL,UAAU,WAAU,wGACzB,yBAAKA,UAAU,SAAQ,sCAAYD,EAAMc,QACzC,yBAAKb,UAAU,YAAW,0CAAgBD,EAAMe,c,aCDxD,SAASC,EAAQC,GACf,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,OAAOH,E,IAsGMO,E,4MAlGbC,MAAQ,CACNC,OACAZ,MAAO,EACPC,SAAU,EACVY,UAAW,EACXC,YAAa,EACbC,cAAe,I,EAIjBnB,YAAc,SAAAF,GACZ,IAAIqB,EAAe,EAAKJ,MAAMI,cAC1Bf,EAAQ,EAAKW,MAAMX,MACnBC,EAAW,EAAKU,MAAMV,SAC1B,EAAKe,SAAS,CACZH,UAAW,EACXC,YAAa,KAGqB,IAA/BC,EAAcE,QAAQvB,IAGzBqB,EAAcG,KAAKxB,GAGnB,EAAKyB,kBAEL,EAAKC,eACyB,KAArB,EAAKT,MAAMX,MAEpB,EAAKgB,SAAS,CACZF,YAAa,EACbd,MAAO,EACPe,cAAe,KAIjB,EAAKC,SAAS,CACZhB,MAAO,EACPa,UAAW,EACXE,cAAe,KAIff,EAAQC,GACV,EAAKe,SAAS,CACZf,SAAUD,K,EAMhBmB,gBAAkB,WAChB,EAAKH,SAAS,CAAEhB,MAAO,EAAKW,MAAMX,MAAQ,K,EAI5CoB,YAAc,WACZ,EAAKJ,SAAS,CAAEJ,KAAMV,EAAQU,M,uDAGxB,IAAD,OACP,OACE,yBAAKzB,UAAU,aACf,kBAAC,EAAD,KACE,yBACIA,UAAU,qBACVkC,MAAO,CAACC,QAASC,KAAKZ,MAAME,YAFhC,6CAME,yBACE1B,UAAU,sBACVkC,MAAO,CAACC,QAASC,KAAKZ,MAAMG,cAF9B,mDAOF,kBAAC,EAAD,CACEd,MAAOuB,KAAKZ,MAAMX,MAClBC,SAAUsB,KAAKZ,MAAMV,SACrBuB,QAASD,KAAKZ,MAAMa,UAEnBD,KAAKZ,MAAMC,KAAKa,KAAI,SAAAb,GAAI,OACvB,kBAAC,EAAD,CACAc,IAAKd,EAAKlB,GACVA,GAAIkB,EAAKlB,GACTD,MAAOmB,EAAKnB,MACZG,YAAa,EAAKA,kBAIvB,yBAAKT,UAAU,UAAS,mE,GA7FXwC,aCJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACH,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4HjC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMpB,c","file":"static/js/main.323cdca8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Cards.css\";\r\n\r\n//Render image to the screen\r\nconst Cards = props => (\r\n  <div className=\"card img-container\">\r\n       <img height=\"150\" width=\"120\" alt={props.name} src={props.image} id={props.id} \r\n         onClick={() => props.clickedCard(props.id)}/> \r\n  </div>\r\n);\r\n\r\nexport default Cards;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\n\r\nconst Header = props => (\r\n    <div className=\"container\">\r\n        <div className=\"title\"><img alt=\"Stranger Things Logo\" src={'/assets/images/logo.png'}></img></div>\r\n        <div className=\"message\"><h4>Click an image to get a point, but don't click an image more than once!</h4></div>\r\n        <div className=\"score\"><h5>Score: {props.score}</h5></div>\r\n        <div className=\"topScore\"><h5>Top Score: {props.topScore}</h5></div>\r\n    </div>\r\n);\r\n\r\nexport default Header;","import React, { Component } from \"react\";\nimport Cards from \"./components/Cards\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport data from \"./cards.json\";\nimport \"./App.css\";\n\n//function to randomly shuffle cards\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n//set state\nclass App extends Component {\n  state = {\n    data,\n    score: 0,\n    topScore: 0,\n    showAlert: 0,\n    showSuccess: 0,\n    clickedImages: []\n  };\n\n  //function for handling clicking of a card\n  clickedCard = id => {\n    let clickedImages= this.state.clickedImages;\n    let score = this.state.score;\n    let topScore = this.state.topScore;\n    this.setState({\n      showAlert: 0,\n      showSuccess: 0\n    });\n     // if the clicked image has an id that exists\n     if (clickedImages.indexOf(id) === -1) {\n\n      // push that id into the array to store the ids\n      clickedImages.push(id);\n      //console.log(clickedImages);\n      //call the score function\n      this.handleIncrement();\n      //call the reshuffle function\n      this.makeShuffle();\n    } else if (this.state.score === 12) { \n      //if player gets score of 12, player wins and game restarts\n      this.setState({\n        showSuccess: 1,\n        score: 0,\n        clickedImages: []\n      });\n    } else {\n       //if player does not get to 12, player loses and game restarts\n      this.setState({\n        score: 0,\n        showAlert: 1,\n        clickedImages: []\n      });\n    }\n    //highest score is displayed as top score\n    if (score > topScore) {\n      this.setState({\n        topScore: score\n      });\n    }\n  };\n\n  //increase this.state.score by 1\n  handleIncrement = () => {\n    this.setState({ score: this.state.score + 1 });\n  };\n\n  //shuffle cards\n  makeShuffle = () => {\n    this.setState({ data: shuffle(data) });\n  };\n\nrender() {\n  return (\n    <div className=\"container\">\n    <Wrapper>\n      <div\n          className=\"alert alert-danger\"\n          style={{opacity: this.state.showAlert }}\n        >\n          You clicked on this already, try again...\n          </div>\n        <div\n          className=\"alert alert-success\"\n          style={{opacity: this.state.showSuccess }}\n        >\n         Winner! You didn't click a card more than once!\n          </div>\n   \n      <Header\n        score={this.state.score}\n        topScore={this.state.topScore}\n        message={this.state.message}/>\n        \n        {this.state.data.map(data => ( \n          <Cards \n          key={data.id}\n          id={data.id}\n          image={data.image}\n          clickedCard={this.clickedCard}/>\n         ))} \n         \n     </Wrapper>\n     <div className=\"footer\"><h6>Created By Jennifer Moundanos</h6></div>\n     </div>\n    );\n  }\n}      \n      \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n      <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}